{
  "start_state": "START",
  "states": {
    "START": {
      "transitions": [
        { "input": "letter", "next_state": "IN_IDENTIFIER" },
        { "input": "digit", "next_state": "IN_INTEGER" },
        { "input": "'", "next_state": "IN_QUOTE" },
        { "input": ";", "next_state": "SEMICOLON_FINAL" },
        { "input": ",", "next_state": "COMMA_FINAL" },
        { "input": ")", "next_state": "RPAREN_FINAL" },
        { "input": "[", "next_state": "LBRACKET_FINAL" },
        { "input": "]", "next_state": "RBRACKET_FINAL" },
        { "input": "+", "next_state": "ARITHMETIC_OPERATOR_FINAL" },
        { "input": "-", "next_state": "ARITHMETIC_OPERATOR_FINAL" },
        { "input": "/", "next_state": "ARITHMETIC_OPERATOR_FINAL" },
        { "input": "*", "next_state": "ARITHMETIC_OPERATOR_FINAL" },
        { "input": "=", "next_state": "RELATIONAL_OPERATOR_FINAL" },
        { "input": ":", "next_state": "COLON_STATE" },
        { "input": ".", "next_state": "DOT_STATE" },
        { "input": "<", "next_state": "LT_STATE" },
        { "input": ">", "next_state": "GT_STATE" },
        { "input": "(", "next_state": "LPAREN_STATE" }
      ]
    },
    "IN_QUOTE": {
      "transitions": [
        { "input": "'", "next_state": "EMPTY_CHAR_FINAL" },
        { "input": "any_other", "next_state": "FIRST_CHAR" }
      ]
    },
    "EMPTY_CHAR_FINAL": {
      "is_final": true,
      "token_type": "CharLiteral"
    }, 
    "FIRST_CHAR": {
      "transitions": [
        { "input": "'", "next_state": "POSSIBLE_CHAR_END" },
        { "input": "any_other", "next_state": "IN_STRING_MULTI" }
      ]
    },
    "POSSIBLE_CHAR_END": {
      "is_final": true,
      "token_type": "CharLiteral",
      "transitions": [
        { "input": "'", "next_state": "IN_STRING_MULTI" }
      ]
    },
    "IN_STRING_MULTI": {
      "transitions": [
        { "input": "'", "next_state": "POSSIBLE_STRING_END" },
        { "input": "any_other", "next_state": "IN_STRING_MULTI" }
      ]
    },
    "POSSIBLE_STRING_END": {
      "is_final": true,
      "token_type": "StringLiteral",
      "transitions": [
        { "input": "'", "next_state": "IN_STRING_MULTI" }
      ]
    },
    "IN_IDENTIFIER": {
      "is_final": true,
      "token_type": "Identifier",
      "transitions": [
        { "input": "letter", "next_state": "IN_IDENTIFIER" },
        { "input": "digit", "next_state": "IN_IDENTIFIER" },
        { "input": "_", "next_state": "IN_IDENTIFIER" }
      ]
    },
    "IN_INTEGER": {
      "is_final": true,
      "token_type": "IntegerLiteral",
      "transitions": [
        { "input": "digit", "next_state": "IN_INTEGER" },
        { "input": ".", "next_state": "AFTER_DOT" },
        { "input": "e", "next_state": "AFTER_E"},
        { "input": "E", "next_state": "AFTER_E" }
      ]
    },
    "AFTER_DOT": {
      "transitions": [
        { "input": "digit", "next_state": "IN_REAL" }
      ]
    },
    "IN_REAL": {
      "is_final": true,
      "token_type": "RealLiteral",
      "transitions": [
        { "input": "digit", "next_state": "IN_REAL" },
        { "input": "e", "next_state": "AFTER_E"},
        { "input": "E", "next_state": "AFTER_E" }
      ]
    },
    "AFTER_E": {
      "transitions": [
        { "input": "+", "next_state": "AFTER_E_SIGN" },
        { "input": "-", "next_state": "AFTER_E_SIGN" },
        { "input": "digit", "next_state": "IN_EXPONENT" }
      ]
    },
    "AFTER_E_SIGN": {
      "transitions": [
        { "input": "digit", "next_state": "IN_EXPONENT" }
      ]
    },
    "IN_EXPONENT": {
      "is_final": true,
      "token_type": "ScientificLiteral",
      "transitions": [
        { "input": "digit", "next_state": "IN_EXPONENT" }
      ]
    },
    "COLON_STATE": {
      "is_final": true,
      "token_type": "Colon",
      "transitions": [
        { "input": "=", "next_state": "ASSIGN_OPERATOR_FINAL" }
      ]
    },
    "DOT_STATE": {
      "is_final": true,
      "token_type": "Dot",
      "transitions": [
        { "input": ".", "next_state": "RANGE_OPERATOR_FINAL" }
      ]
    },
    "LT_STATE": {
      "is_final": true,
      "token_type": "RelationalOperator",
      "transitions": [
        { "input": "=", "next_state": "RELATIONAL_OPERATOR_FINAL" },
        { "input": ">", "next_state": "RELATIONAL_OPERATOR_FINAL" }
      ]
    },
    "GT_STATE": {
      "is_final": true,
      "token_type": "RelationalOperator",
      "transitions": [
        { "input": "=", "next_state": "RELATIONAL_OPERATOR_FINAL" }
      ]
    },
    "LPAREN_STATE": {
      "is_final": true,
      "token_type": "LParenthesis"
    },
    "SEMICOLON_FINAL": { "is_final": true, "token_type": "Semicolon" },
    "COMMA_FINAL": { "is_final": true, "token_type": "Comma" },
    "RPAREN_FINAL": { "is_final": true, "token_type": "RParenthesis" },
    "LBRACKET_FINAL": { "is_final": true, "token_type": "LBracket" },
    "RBRACKET_FINAL": { "is_final": true, "token_type": "RBracket" },
    "ARITHMETIC_OPERATOR_FINAL": { "is_final": true, "token_type": "ArithmeticOperator" },
    "RELATIONAL_OPERATOR_FINAL": { "is_final": true, "token_type": "RelationalOperator" },
    "ASSIGN_OPERATOR_FINAL": { "is_final": true, "token_type": "AssignOperator" },
    "RANGE_OPERATOR_FINAL": { "is_final": true, "token_type": "RangeOperator" }
  },

  "reserved_words": {
    "program": "Keyword",
    "var": "Keyword",
    "const": "Keyword",
    "type": "Keyword",
    "function": "Keyword",
    "procedure": "Keyword",
    "begin": "Keyword",
    "end": "Keyword",
    "if": "Keyword",
    "then": "Keyword",
    "else": "Keyword",
    "while": "Keyword",
    "do": "Keyword",
    "for": "Keyword",
    "to": "Keyword",
    "downto": "Keyword",
    "integer": "Keyword",
    "real": "Keyword",
    "boolean": "Keyword",
    "char": "Keyword",
    "array": "Keyword",
    "of": "Keyword",
    "true": "Keyword",
    "false": "Keyword",
    "div": "ArithmeticOperator",
    "mod": "ArithmeticOperator",
    "and": "LogicalOperator",
    "or": "LogicalOperator",
    "not": "LogicalOperator"
  }
}